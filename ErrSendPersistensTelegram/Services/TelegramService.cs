using ErrSendApplication.Common.Configs;
using Microsoft.Extensions.Options;
using System.Text;
using System.Text.Json;
using ErrSendApplication.Interfaces.Client;
using ErrSendApplication.Interfaces.Telegram;
using FluentValidation;
using ErrSendApplication.Validators;

namespace ErrSendPersistensTelegram.Services
{
    public class TelegramService : ITelegramService
    {
        private const string TelegramApiUrl = "https://api.telegram.org/bot";
        private const string SendMessageEndpoint = "/sendMessage";
        private const string HtmlParseMode = "HTML";

        private readonly IHttpClientWr httpClient;
        private readonly TelegramConfig telegramConfig;
        private readonly IValidator<(string errorMessage, string? additionalInfo, TelegramConfig config)> validator;
        private readonly IValidator<TelegramSendMessageRequestValidator.TelegramSendMessageRequest> messageValidator;

        public TelegramService(
            IHttpClientWr httpClient, 
            IOptions<TelegramConfig> telegramConfig,
            IValidator<(string errorMessage, string? additionalInfo, TelegramConfig config)> validator,
            IValidator<TelegramSendMessageRequestValidator.TelegramSendMessageRequest> messageValidator)
        {
            this.httpClient = httpClient;
            this.telegramConfig = telegramConfig.Value;
            this.validator = validator;
            this.messageValidator = messageValidator;
        }

        public async Task SendErrorMessageAsync(string errorMessage, string? additionalInfo = null)
        {
            try
            {
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ FluentValidation –∑–∞–º—ñ—Å—Ç—å —Ä—É—á–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
                var validationResult = await validator.ValidateAsync((errorMessage, additionalInfo, telegramConfig));
                
                if (!validationResult.IsValid)
                {
                    // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥–µ—Ä)
                    var errors = string.Join(", ", validationResult.Errors.Select(e => e.ErrorMessage));
                    return; // –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π—à–ª–∞
                }

                var message = FormatErrorMessage(errorMessage, additionalInfo);
                var url = $"{TelegramApiUrl}{telegramConfig.BotToken}{SendMessageEndpoint}";

                var payload = new TelegramSendMessageRequestValidator.TelegramSendMessageRequest
                {
                    ChatId = telegramConfig.ChatId,
                    Text = message,
                    ParseMode = HtmlParseMode
                };

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è payload –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                var messageValidationResult = await messageValidator.ValidateAsync(payload);
                if (!messageValidationResult.IsValid)
                {
                    var messageErrors = string.Join(", ", messageValidationResult.Errors.Select(e => e.ErrorMessage));
                    return; // –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è payload –Ω–µ –ø—Ä–æ–π—à–ª–∞
                }

                var jsonPayload = JsonSerializer.Serialize(payload);

                var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
                await httpClient.PostAsync(url, content);
            }
            catch
            {
                // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
            }
        }

        private string FormatErrorMessage(string errorMessage, string? additionalInfo)
        {
            var sb = new StringBuilder();
            sb.AppendLine("üö® <b>–ü–æ–º–∏–ª–∫–∞ –≤ –¥–æ–¥–∞—Ç–∫—É</b>");
            sb.AppendLine($"‚è∞ <b>–ß–∞—Å:</b> {DateTime.Now:dd.MM.yyyy HH:mm:ss}");
            sb.AppendLine($"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {System.Net.WebUtility.HtmlEncode(errorMessage)}");

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è additionalInfo —á–µ—Ä–µ–∑ FluentValidation
            if (additionalInfo != null)
            {
                var additionalInfoValidator = new FluentValidation.Validators.LengthValidator(0, 1000);
                var validationResult = additionalInfoValidator.Validate(additionalInfo);
                
                if (validationResult.IsValid && !string.IsNullOrWhiteSpace(additionalInfo))
                {
                    // –î–µ–∫–æ–¥—É—î–º–æ, —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –ø—Ä–∏–π—à–æ–≤ URL-encoded —Ç–µ–∫—Å—Ç
                    var decodedInfo = System.Net.WebUtility.UrlDecode(additionalInfo);
                    sb.AppendLine($"‚ÑπÔ∏è <b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {System.Net.WebUtility.HtmlEncode(decodedInfo)}");
                }
            }

            return sb.ToString();
        }
    }
} 

